# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XEsHEi85dTjsD9rXjd_Ia3hdlKF_BYgZ
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt
def load_image(image_path):
    #Load an image from a file path.
    image = cv2.imread(image_path)
    return cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
def segment_image(image, k=3):
    # Reshape the image
    pixels = image.reshape((-1, 3))
    pixels = np.float32(pixels)
    # Set criteria for K-means clustering
    criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 10, 1.0)
    # Apply K-means clustering-->one of the technique that converts the 3D images ti floor plans or 2D images
    ret, label, center = cv2.kmeans(pixels, k, None, criteria, 10, cv2.KMEANS_RANDOM_CENTERS)
    # Convert data back to original image
    center = np.uint8(center)
    res = center[label.flatten()]
    segmented_image = res.reshape((image.shape))
    return segmented_image
def visualize_image_and_floor_plan(image, segmented_image, title):
    """Display the original image and segmented image side by side."""
    fig, axes = plt.subplots(1, 2, figsize=(12, 6))
    # Plot original image
    axes[0].imshow(image)
    axes[0].set_title("Original Image")
    axes[0].axis('off')
    # Plot segmented image
    axes[1].imshow(segmented_image, cmap='gray')
    axes[1].set_title("Segmented Image")
    axes[1].axis('off')
    # Show the images
    plt.show()
def main(image_path):
    # Load the image
    image = load_image(image_path)
    # Segment the image
    segmented_image = segment_image(image)
    # Visualize the images
    visualize_image_and_floor_plan(image, segmented_image, "Segmented Image")
if __name__ == "__main__":
    # Replace '3Dimage.jpg' with the path to your image file
    image_path = '3Dimage.jpg'
    main(image_path)